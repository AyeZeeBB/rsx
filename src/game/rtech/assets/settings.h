#pragma once
#include <game/rtech/assets/settings_layout.h>


struct SettingsAssetHeader_v1_t
{
	uint64_t settingsLayoutGuid;

	char* valueData;

	char* name;

	char* stringData;

	uint32_t uniqueID;
	char unk_24[4]; // padding most likely

	char** modNames;

	void* unk_30;

	int valueBufSize;
	int unknown1;
	int modNameCount;
	int unknown3;
};
static_assert(sizeof(SettingsAssetHeader_v1_t) == 72);

struct SettingsAssetHeader_v2_t
{
	uint64_t settingsLayoutGuid;

	char* valueData;

	char* name;

	char* stringData;

	char unk_1C[8];

	uint32_t uniqueID;
	char unk_24[4];

	char** modNames;

	void* unk_30;

	int valueBufSize;
	int unknown1;
	int modNameCount;
	int unknown3;
};
static_assert(sizeof(SettingsAssetHeader_v2_t) == 80);

class CPakAsset;

class SettingsAsset
{
public:
	SettingsAsset(SettingsAssetHeader_v1_t* hdr)
		: layoutGuid(hdr->settingsLayoutGuid), layoutAsset(nullptr), valueData(hdr->valueData), name(hdr->name),
		stringData(hdr->stringData), uniqueId(hdr->uniqueID), modNames(hdr->modNames), unk_30(hdr->unk_30), valueBufSize(hdr->valueBufSize),
		unknown1(hdr->unknown1), modNameCount(hdr->modNameCount), unknown3(hdr->unknown3)
	{};

	SettingsAsset(SettingsAssetHeader_v2_t* hdr)
		: layoutGuid(hdr->settingsLayoutGuid), layoutAsset(nullptr), valueData(hdr->valueData), name(hdr->name),
		stringData(hdr->stringData), uniqueId(hdr->uniqueID), modNames(hdr->modNames), unk_30(hdr->unk_30), valueBufSize(hdr->valueBufSize),
		unknown1(hdr->unknown1), modNameCount(hdr->modNameCount), unknown3(hdr->unknown3)
	{};

	uint64_t layoutGuid;
	CPakAsset* layoutAsset;

	char* valueData;
	char* name;

	char* stringData;
	uint32_t uniqueId; // "unique ID generated by Bakery" - used as itemflavor GUID

	char** modNames;
	void* unk_30;

	int valueBufSize;
	int unknown1;
	int modNameCount;
	int unknown3;

public:
	void* GetPointerToValue(uint32_t valueOffset) const
	{
		return reinterpret_cast<char*>(valueData) + valueOffset;
	}

	void R_WriteSetFile(std::string& out, const size_t indentLevel, const char* valueData, const SettingsLayoutAsset* layout);
	void R_WriteSetFile(std::string& out, const size_t indentLevel, const char* valueData, const SettingsLayoutAsset* layout, const SettingsField* const field);

	void R_WriteSetFileArray(std::string& out, const size_t indentLevel, const char* valData, const size_t arrayElemCount, const SettingsLayoutAsset& subLayout);

	void R_WriteModNames(std::string& out) const;
};